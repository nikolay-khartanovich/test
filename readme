# Meticulous AI тестирование приложения Angular

Этот проект интегрирован с Meticulous AI для автоматизированного тестирования UI и обнаружения регрессий.

## Как работает Meticulous AI

Meticulous AI использует инновационный подход к тестированию:

1. **Запись пользовательских сессий**: Скрипт записывает реальные действия пользователей в приложении.
2. **Воспроизведение сессий в CI**: Записанные действия воспроизводятся в CI для выявления визуальных изменений.
3. **Обнаружение регрессий**: Автоматически выявляет визуальные различия между версиями приложения.
4. **Отчетность**: Добавляет комментарии в PR с подробностями об изменениях.

## Настройка Meticulous в новом проекте

### 1. Добавление скрипта записи в приложение

Добавьте скрипт Meticulous в `index.html` или главный layout файл:

```html
<head>
  <!-- Скрипт должен быть первым в head -->
  <script
    data-recording-token="ВАШ_ТОКЕН_ЗАПИСИ"
    data-is-production-environment="false"
    src="https://snippet.meticulous.ai/v1/meticulous.js"
  ></script>
  <!-- Другие скрипты и теги -->
</head>
```

### 2. Создание GitHub Actions workflow

Создайте файл `.github/workflows/meticulous.yaml`:

```yaml
name: Meticulous

on:
  push:
    branches:
      - main
  pull_request: {}
  workflow_dispatch: {}

permissions:
  actions: write
  contents: read
  issues: write
  pull-requests: write
  statuses: read

jobs:
  test:
    name: Report diffs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Serve project
        # Настройте соответственно вашему фреймворку
        run: |
          npx http-server dist/ИМЯ_ПРОЕКТА -p 4200 --silent &
          sleep 5

      - name: Run Meticulous tests
        uses: alwaysmeticulous/report-diffs-action/cloud-compute@v1
        with:
          api-token: ${{ secrets.METICULOUS_API_TOKEN }}
          app-url: "http://localhost:4200/"
```

### 3. Настройка секретов GitHub

Добавьте `METICULOUS_API_TOKEN` в секретах репозитория на GitHub:
- Settings → Secrets and variables → Actions → New repository secret
- Имя: `METICULOUS_API_TOKEN`
- Значение: Ваш API-токен из панели управления Meticulous

### 4. Настройка для различных фреймворков

#### React (Create React App)
```yaml
npm run build
npx serve -s build -l 3000 &
```

#### Vue.js
```yaml
npm run build
npx http-server dist -p 8080 &
```

#### Next.js
```yaml
npm run build
npm run start &
```

## Использование Meticulous

### Запись тестов

1. Запустите локальный сервер (`npm start`)
2. Используйте приложение, выполняя обычные сценарии
3. Действия автоматически записываются и отправляются в Meticulous

### Анализ результатов в PR

1. В каждом PR будет комментарий от Meticulous с обнаруженными изменениями
2. Перейдите по ссылке для подробного просмотра изменений
3. При необходимости утвердите изменения кнопкой "Approve all Visual Differences"

### Отладка тестов

Добавьте `[meticulous debug]` в заголовок PR для включения режима отладки, который сохраняет туннель открытым для проверки запущенного приложения.

## Полезные ссылки

- [Документация Meticulous](https://docs.meticulous.ai/)
- [Панель управления Meticulous](https://app.meticulous.ai/)
- [GitHub репозиторий Meticulous](https://github.com/alwaysmeticulous)