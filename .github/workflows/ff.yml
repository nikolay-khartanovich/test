name: Merge Safety Commit Check
on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]
permissions:
  issues: write
  pull-requests: write
  contents: read
  organization: read
jobs:
  check:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) return;

            if (context.eventName === 'pull_request' && (context.payload.action === 'labeled' || context.payload.action === 'unlabeled')) {
              const labels = (pr.labels || []).map(l => l.name);
              if (labels.includes('blocked')) {
                core.setFailed('PR blocked by Merge Safety Commit Check');
              }
              return;
            }

            const properties = await github.request('GET /orgs/{org}/properties/values', {
              org: context.repo.owner,
              headers: {
                'Accept': 'application/vnd.github+json',
                'X-GitHub-Api-Version': '2022-11-28',
                'Authorization': `Bearer ${process.env.GH_TOKEN}`
              }
            });

            const thresholdProperty = properties.data.find(p => p.property_name === 'commits_block_threshold');
            const threshold = thresholdProperty ? parseInt(thresholdProperty.value) : 10;
            const actualCommits = pr.commits || 0;

            console.log('Commit threshold:', threshold);

            if (actualCommits > threshold) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['blocked']
              });
              core.setFailed(`Too many commits: ${actualCommits} (threshold: ${threshold})`);
            }