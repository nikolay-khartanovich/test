name: PR Commits Blocker

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [unlabeled, labeled]

permissions:
  issues: write
  pull-requests: write
  statuses: write

jobs:
  check-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Check number of commits
        uses: actions/github-script@v6
        with:
          script: |
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const MAX_COMMITS = 1;

            // Check if blocked label exists
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const hasBlockedLabel = labels.some(label => label.name === 'blocked');

            // If the event is unlabeled and it was the blocked label, set success status
            if (context.payload.action === 'unlabeled' && context.payload.label.name === 'blocked') {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                context: 'commits-check',
                description: 'Manually approved by removing blocked label'
              });
              return;
            }

            // Skip adding blocked label if it was manually removed
            if (context.payload.action === 'unlabeled' && context.payload.label.name === 'blocked') {
              return;
            }

            if (commits.length > MAX_COMMITS && !hasBlockedLabel) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['blocked']
              });

              // Set check status as failed
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'failure',
                context: 'commits-check',
                description: `Too many commits (${commits.length} > ${MAX_COMMITS}). Please remove "blocked" label to unblock the PR.`
              });
            } else if (commits.length <= MAX_COMMITS || hasBlockedLabel) {
              // Remove blocked label if it was added previously
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: 'blocked'
                });
              } catch (error) {
                // Ignore error if label doesn't exist
              }

              // Set check status as success
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                context: 'commits-check',
                description: `Commits count is within limits (${commits.length} <= ${MAX_COMMITS}) or manually approved`
              });
            }
